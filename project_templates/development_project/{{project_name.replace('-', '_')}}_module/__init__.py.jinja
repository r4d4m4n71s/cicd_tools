"""
Example module for {{ project_name }}.

This module demonstrates proper Python package structure and logging configuration.
"""

__version__ = "0.1.0"

import logging
import logging.config
import os
from pathlib import Path
import yaml

def setup_logging():
    """Configure logging based on the application configuration."""
    config_path = Path(__file__).parent.parent / '.app_cache' / 'config.yaml'
    
    if not config_path.exists():
        # Set up basic logging if config doesn't exist
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        return
        
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
            
        logging_config = config.get('logging', {}).get('default', {})
        
        # Configure handlers
        handlers = {}
        for handler_config in logging_config.get('handlers', []):
            handler_type = handler_config.get('type')
            
            if handler_type == 'console':
                handlers[f'console_{len(handlers)}'] = {
                    'class': 'logging.StreamHandler',
                    'formatter': 'default',
                    'level': logging_config.get('level', 'INFO')
                }
                
            elif handler_type == 'file':
                # Create directory if it doesn't exist
                log_dir = Path(handler_config.get('filename', 'app.log')).parent
                if not log_dir.exists():
                    log_dir.mkdir(parents=True, exist_ok=True)
                    
                handlers[f'file_{len(handlers)}'] = {
                    'class': 'logging.handlers.RotatingFileHandler',
                    'filename': handler_config.get('filename', 'app.log'),
                    'maxBytes': handler_config.get('max_bytes', 10485760),
                    'backupCount': handler_config.get('backup_count', 3),
                    'formatter': 'default',
                    'level': logging_config.get('level', 'INFO')
                }
        
        # Create logging configuration dictionary
        logging_dict_config = {
            'version': 1,
            'formatters': {
                'default': {
                    'format': logging_config.get('format', '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
                }
            },
            'handlers': handlers,
            'loggers': {
                '{{ project_name.replace('-', '_') }}': {
                    'level': logging_config.get('level', 'INFO'),
                    'handlers': list(handlers.keys()),
                    'propagate': False
                }
            },
            'root': {
                'level': 'WARNING',
                'handlers': list(handlers.keys())
            }
        }
        
        # Configure logging
        logging.config.dictConfig(logging_dict_config)
        
    except Exception as e:
        # Fall back to basic configuration if there's an error
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        logging.warning(f"Error configuring logging: {e}")

# Set up logging when the module is imported
setup_logging()

# Create logger for this module
logger = logging.getLogger('{{ project_name.replace('-', '_') }}')
